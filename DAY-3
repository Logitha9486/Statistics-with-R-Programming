#1st

#1

recurse_fibonacci <- function(n) 
{
  if(n <= 1) 
  {
    return(n)
  } 
  else 
  {
    return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
  }
}
print("Fibonacci sequence:")
for(i in 0:5) 
{
  print(recurse_fibonacci(i))
}

#2

s=0
for (i in 1:10)
{
  s=s+i
}
print(paste("Sum of natural numbers upto 10 :",s))

#3

b=list()
for (i in 1:10)
{
  z=i*i
  b=append(b,z)
}
print(b)



#2nd

library(reshape)
library(dplyr)
a=mtcars

#1

dim(a)

#2

summary(a)

#3

c=sapply(a,function(x) class(x))
print(c)

#4

print(aggregate(a$wt,list(a$vs),mean))

#5

print(aggregate(a$wt,list(a$vs),max))
print(aggregate(a$wt,list(a$vs),min))

#3rd

library(ggplot2)
data(mtcars)

#1

ggplot(mtcars, aes(x=wt, y=disp, color=factor(vs))) +
  geom_point() +
  ggtitle("Weight vs. Displacement by Engine Shape") +
  xlab("Weight (wt)") +
  ylab("Displacement (disp)")

#2

ggplot(mtcars, aes(x=hp, y=mpg, color=vs)) + 
  geom_point() + 
  ggtitle("Scatterplot of Horsepower and Mileage by Engine Shape")

#4

ggplot(mtcars, aes(x = hp, y = mpg, color = factor(cyl))) +
  geom_point() +
  facet_wrap(~ vs) +
  ggtitle("Horsepower and Mileage Scatter Plot by Engine Shape and Cylinder Size") +
  xlab("Horsepower (hp)") +
  ylab("Mileage (mpg)")

#5

ggplot(data = mtcars) +
  geom_histogram(mapping = aes(x = hp), binwidth = 5) +
  ggtitle("Histogram of Horsepower (hp)") +
  xlab("Horsepower (hp)") 

#4th

library(ggplot2)
library(dplyr)

#1

mtacars <-mtcars
str(mtacars)
sum(is.na(mtacars))
mtacars <- mtacars[complete.cases(mtacars), ]
table(mtacars$vs)
model <- glm(vs ~ hp+ wt + cyl + disp, data = mtacars)
summary(model)

#2

data(mtcars)
set.seed(123)
split_index <- sample(1:nrow(mtcars), size = 0.8*nrow(mtcars))
train_data <- mtcars[split_index, ]
test_data <- mtcars[-split_index, ]
model <- glm(vs~hp+wt+disp+cyl , data = train_data, family = "binomial")
predictions <- predict(model, test_data, type = "response")

#3

predictions <- ifelse(predictions > 0.5, 1, 0)
library(caret)
confusionMatrix(predictions, test_data$am)
